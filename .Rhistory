dl_lab<- chunk.adddata(dl_e,lab)
par.cl<- makeCluster(no.workers)
dist.env<- environment()
clusterExport(par.cl,varlist = c("dl_e","dl_lab","filter","arrange"), envir = dist.env)
# #function test
# browser()
#     edf<- dl_e[[1]] |>
#     arrange(uniPatID)
#   labdf<- dl_lab[[1]]
#   out<- matrix(NA,nrow = nrow(edf), ncol = 7)
#
#   pat<- edf$uniPatID[1]
#   im_lab<- labdf|>
#     filter(uniPatID==pat)
#   if(nrow(im_lab)>0){
#     for(i in seq(1, nrow(im_lab))){
#       if (im_lab$TG_DateNum[i]>=edf$start_date[1] && im_lab$TG_DateNum[i]<=edf$end_date[1]) {
#         selector<- max(which(im_lab[i,]==1))-4 #max because we want to select the last column
#         out[1,selector]<- im_lab$TG_DateNum[i]
#       }
#     }
#   }
#
#   for(j in seq(2,nrow(edf))){
#     pat<- edf$uniPatID[j]
#     if(edf$uniPatID[j-1]!=pat){
#       im_lab<- labdf|>
#         filter(uniPatID==pat)
#     }
#     if(nrow(im_lab)>0){
#       for(i in seq(1, nrow(im_lab))){
#         if (im_lab$TG_DateNum[i]>=edf$start_date[i] && im_lab$TG_DateNum[i]<=edf$end_date[i]) {
#           selector<- max(which(im_lab[i,]==1))-4 #max because we want to select the last column; minus 4 because we ignore the first four columns of lab
#           out[j,selector]<- im_lab$TG_DateNum[i]
#         }
#       }
#     }
#   }
#   out<- as.data.frame(cbind(edf,out))
#   colnames(out)<- c(colnames(edf),colnames(labdf)[-(1:4)])
# #end of function test
result<- parLapply(cl=par.cl, 1:no.splits,function(k){
edf<- dl_e[[k]] |>
arrange(uniPatID)
labdf<- dl_lab[[k]]
out<- matrix(NA,nrow = nrow(edf), ncol = 7)
pat<- edf$uniPatID[1]
im_lab<- labdf|>
filter(uniPatID==pat)
if(nrow(im_lab)>0){
for(i in seq(1, nrow(im_lab))){
if (im_lab$TG_DateNum[i]>=edf$start_date[1] && im_lab$TG_DateNum[i]<=edf$end_date[1]) {
selector<- max(which(im_lab[i,]==1))-4 #max because we want to select the last column
out[1,selector]<- im_lab$TG_DateNum[i]
}
}
}
for(j in seq(2,nrow(edf))){
pat<- edf$uniPatID[j]
if(edf$uniPatID[j-1]!=pat){
im_lab<- labdf|>
filter(uniPatID==pat)
}
if(nrow(im_lab)>0){
for(i in seq(1, nrow(im_lab))){
if (im_lab$TG_DateNum[i]>=edf$start_date[j] && im_lab$TG_DateNum[i]<=edf$end_date[j]) {
selector<- max(which(im_lab[i,]==1))-4 #max because we want to select the last column
out[j,selector]<- im_lab$TG_DateNum[i]
}
}
}
}
out<- as.data.frame(cbind(edf,out))
colnames(out)<- c(colnames(edf),colnames(labdf)[-(1:4)])
return(out)
})
out<- as.data.frame(matrix(NA,nrow = nrow(episodedf), ncol = ncol(episodedf)+7))
colnames(out)<- colnames(result[[1]])
ticker<- 1
for(j in seq(1,length(result))){
out[seq(ticker,ticker-1+nrow(result[[j]])),]<- result[[j]]
ticker<- ticker+nrow(result[[j]])
}
return(out)
}
add.ueberweis.par<- function(episodedf, ueberweis, no.splits, no.workers){
dl_e<- chunk.data(episodedf,no.splits)
dl_ueberweis<- chunk.adddata(dl_e,ueberweis)
par.cl<- makeCluster(no.workers)
dist.env<- environment()
clusterExport(par.cl,varlist = c("dl_e","dl_ueberweis","filter","arrange"), envir = dist.env)
# #function test
# browser()
#     edf<- dl_e[[1]] |>
#     arrange(uniPatID)
#   labdf<- dl_lab[[1]]
#   out<- matrix(NA,nrow = nrow(edf), ncol = 7)
#
#   pat<- edf$uniPatID[1]
#   im_lab<- labdf|>
#     filter(uniPatID==pat)
#   if(nrow(im_lab)>0){
#     for(i in seq(1, nrow(im_lab))){
#       if (im_lab$TG_DateNum[i]>=edf$start_date[1] && im_lab$TG_DateNum[i]<=edf$end_date[1]) {
#         selector<- max(which(im_lab[i,]==1))-4 #max because we want to select the last column
#         out[1,selector]<- im_lab$TG_DateNum[i]
#       }
#     }
#   }
#
#   for(j in seq(2,nrow(edf))){
#     pat<- edf$uniPatID[j]
#     if(edf$uniPatID[j-1]!=pat){
#       im_lab<- labdf|>
#         filter(uniPatID==pat)
#     }
#     if(nrow(im_lab)>0){
#       for(i in seq(1, nrow(im_lab))){
#         if (im_lab$TG_DateNum[i]>=edf$start_date[i] && im_lab$TG_DateNum[i]<=edf$end_date[i]) {
#           selector<- max(which(im_lab[i,]==1))-4 #max because we want to select the last column; minus 4 because we ignore the first four columns of lab
#           out[j,selector]<- im_lab$TG_DateNum[i]
#         }
#       }
#     }
#   }
#   out<- as.data.frame(cbind(edf,out))
#   colnames(out)<- c(colnames(edf),colnames(labdf)[-(1:4)])
# #end of function test
result<- parLapply(cl=par.cl, 1:no.splits,function(k){
edf<- dl_e[[k]] |>
arrange(uniPatID)
ueberweisdf<- dl_ueberweis[[k]]
out<- matrix(NA,nrow = nrow(edf), ncol = 3)
pat<- edf$uniPatID[1]
im_ueberweis<- ueberweisdf|>
filter(uniPatID==pat)
if(nrow(im_ueberweis)>0){
for(i in seq(1, nrow(im_ueberweis))){
if (im_ueberweis$TG_DateNum[i]>=edf$start_date[1] && im_ueberweis$TG_DateNum[i]<=edf$end_date[1]) {
selector<- max(which(im_ueberweis[i,]==1))-2 #max because we want to select the last column
out[1,selector]<- im_ueberweis$TG_DateNum[i]
}
}
}
for(j in seq(2,nrow(edf))){
pat<- edf$uniPatID[j]
if(edf$uniPatID[j-1]!=pat){
im_ueberweis<- ueberweisdf|>
filter(uniPatID==pat)
}
if(nrow(im_ueberweis)>0){
for(i in seq(1, nrow(im_ueberweis))){
if (im_ueberweis$TG_DateNum[i]>=edf$start_date[j] && im_ueberweis$TG_DateNum[i]<=edf$end_date[j]) {
selector<- max(which(im_ueberweis[i,]==1))-4 #max because we want to select the last column
out[j,selector]<- im_ueberweis$TG_DateNum[i]
}
}
}
}
out<- as.data.frame(cbind(edf,out))
colnames(out)<- c(colnames(edf),colnames(ueberweisdf)[-(1:2)])
return(out)
})
out<- as.data.frame(matrix(NA,nrow = nrow(episodedf), ncol = ncol(episodedf)+3))
colnames(out)<- colnames(result[[1]])
ticker<- 1
for(j in seq(1,length(result))){
out[seq(ticker,ticker-1+nrow(result[[j]])),]<- result[[j]]
ticker<- ticker+nrow(result[[j]])
}
return(out)
}
add.diag.par<- function(episodedf, adddata, no.splits, no.workers){
edl<- chunk.data(episodedf, no.splits)
adddl<- chunk.adddata(edl,adddata)
par.cl<- makeCluster(no.workers)
dist.env<- environment()
clusterExport(par.cl,varlist = c("edl","adddl","arrange","filter","select"), envir = dist.env)
result<- parLapply(par.cl,1:no.splits, function(k){
edf<- edl[[k]]|>
arrange(uniPatID)
diag<- adddl[[k]]
out<- as.data.frame(matrix(NA,nrow = nrow(edf),ncol = 2*ncol(diag)))
no.matches_diag<- numeric(nrow(edf))
pat<- edf$uniPatID[1]
im_diag<- diag|>
filter(uniPatID==pat)
im_diag_2<- im_diag|>
select(-uniPatID,-TG_DateNum)
no.matches<- 0
if(nrow(im_diag)>0){
for(i in seq(1,nrow(im_diag))){
if(im_diag$TG_DateNum[i]>=edf$start_date[1] && im_diag$TG_DateNum[i]<=edf$end_date[1]){
if(no.matches==0){
out[1,]<-rep(im_diag_2[i,],2)
no.matches<- 1
}else{
out[1,seq(ncol(diag)+1,ncol(out))]<- im_diag_2[i,]
no.matches<- no.matches+1
}
}
}
}
no.matches_diag[1]<- no.matches
for(j in seq(2, nrow(edf))){
pat<- edf$uniPatID[j]
if(edf$uniPatID[j-1]!=pat){
im_diag<- diag|>
filter(uniPatID==pat)
im_diag_2<- im_diag|>
select(-uniPatID,-TG_DateNum)
}
no.matches<- 0
if(nrow(im_diag)>0){
for(i in seq(1,nrow(im_diag))){
if(im_diag$TG_DateNum[i]>=edf$start_date[j] && im_diag$TG_DateNum[i]<=edf$end_date[j]){
if(no.matches==0){
out[j,]<-rep(im_diag_2[i,],2)
no.matches<- 1
}else{
out[1,seq(ncol(diag)+1,ncol(out))]<- im_diag_2[i,]
no.matches<- no.matches+1
}
}
}
}
no.matches_diag[j]<- no.matches
}
out<- cbind(edf,out,no.matches_diag)
colnames(out)<- c(colnames(edf),paste0("first_",colnames(im_diag_2)),paste0("last_",colnames(im_diag_2)),"no.matches_diag")
return(out)
})
out<- as.data.frame(matrix(NA,nrow = nrow(episodedf),ncol = ncol(result[[1]])))
colnames(out)<- colnames(result[[1]])
ticker<- 1
for(j in seq(1,length(result))){
out[seq(ticker,ticker-1+nrow(result[[j]])),]<- result[[j]]
ticker<- ticker+nrow(result[[j]])
}
return(out)
}
#number of columns seems off-> check it out!
attempt_4<- add.diag.par(episodes_r1,diag.up_2,50,2)
View(attempt_4)
add.diag.par<- function(episodedf, adddata, no.splits, no.workers){
edl<- chunk.data(episodedf, no.splits)
adddl<- chunk.adddata(edl,adddata)
par.cl<- makeCluster(no.workers)
dist.env<- environment()
clusterExport(par.cl,varlist = c("edl","adddl","arrange","filter","select"), envir = dist.env)
result<- parLapply(par.cl,1:no.splits, function(k){
edf<- edl[[k]]|>
arrange(uniPatID)
diag<- adddl[[k]]
out<- as.data.frame(matrix(NA,nrow = nrow(edf),ncol = 2*ncol(diag)))
no.matches_diag<- numeric(nrow(edf))
pat<- edf$uniPatID[1]
im_diag<- diag|>
filter(uniPatID==pat)
im_diag_2<- im_diag|>
select(-uniPatID,-TG_DateNum)
no.matches<- 0
if(nrow(im_diag)>0){
for(i in seq(1,nrow(im_diag))){
if(im_diag$TG_DateNum[i]>=edf$start_date[1] && im_diag$TG_DateNum[i]<=edf$end_date[1]){
if(no.matches==0){
out[1,]<-rep(im_diag_2[i,],2)
no.matches<- 1
}else{
out[1,seq(ncol(diag)+1,ncol(out))]<- im_diag_2[i,]
no.matches<- no.matches+1
}
}
}
}
no.matches_diag[1]<- no.matches
for(j in seq(2, nrow(edf))){
pat<- edf$uniPatID[j]
if(edf$uniPatID[j-1]!=pat){
im_diag<- diag|>
filter(uniPatID==pat)
im_diag_2<- im_diag|>
select(-uniPatID,-TG_DateNum)
}
no.matches<- 0
if(nrow(im_diag)>0){
for(i in seq(1,nrow(im_diag))){
if(im_diag$TG_DateNum[i]>=edf$start_date[j] && im_diag$TG_DateNum[i]<=edf$end_date[j]){
if(no.matches==0){
out[j,]<-rep(im_diag_2[i,],2)
no.matches<- 1
}else{
out[1,seq(ncol(diag)+1,ncol(out))]<- im_diag_2[i,]
no.matches<- no.matches+1
}
}
}
}
no.matches_diag[j]<- no.matches
}
out<- cbind(edf,out,no.matches_diag)
colnames(out)<- c(colnames(edf),paste0("first_",colnames(im_diag_2)),paste0("last_",colnames(im_diag_2)),"no.matches_diag")
return(out)
})
browser()
out<- as.data.frame(matrix(NA,nrow = nrow(episodedf),ncol = ncol(result[[1]])))
colnames(out)<- colnames(result[[1]])
ticker<- 1
for(j in seq(1,length(result))){
out[seq(ticker,ticker-1+nrow(result[[j]])),]<- result[[j]]
ticker<- ticker+nrow(result[[j]])
}
return(out)
}
#number of columns seems off-> check it out!
attempt_4<- add.diag.par(episodes_r1,diag.up_2,50,2)
dim(result[[1]])
ncol(result[[1]])
colnames(out)
colnames(result[[1]])
add.diag.par<- function(episodedf, adddata, no.splits, no.workers){
edl<- chunk.data(episodedf, no.splits)
adddl<- chunk.adddata(edl,adddata)
par.cl<- makeCluster(no.workers)
dist.env<- environment()
clusterExport(par.cl,varlist = c("edl","adddl","arrange","filter","select"), envir = dist.env)
result<- parLapply(par.cl,1:no.splits, function(k){
edf<- edl[[k]]|>
arrange(uniPatID)
diag<- adddl[[k]]
out<- as.data.frame(matrix(NA,nrow = nrow(edf),ncol = 2*ncol(diag)-4))
no.matches_diag<- numeric(nrow(edf))
pat<- edf$uniPatID[1]
im_diag<- diag|>
filter(uniPatID==pat)
im_diag_2<- im_diag|>
select(-uniPatID,-TG_DateNum)
no.matches<- 0
if(nrow(im_diag)>0){
for(i in seq(1,nrow(im_diag))){
if(im_diag$TG_DateNum[i]>=edf$start_date[1] && im_diag$TG_DateNum[i]<=edf$end_date[1]){
if(no.matches==0){
out[1,]<-rep(im_diag_2[i,],2)
no.matches<- 1
}else{
out[1,seq(ncol(diag)+1,ncol(out))]<- im_diag_2[i,]
no.matches<- no.matches+1
}
}
}
}
no.matches_diag[1]<- no.matches
for(j in seq(2, nrow(edf))){
pat<- edf$uniPatID[j]
if(edf$uniPatID[j-1]!=pat){
im_diag<- diag|>
filter(uniPatID==pat)
im_diag_2<- im_diag|>
select(-uniPatID,-TG_DateNum)
}
no.matches<- 0
if(nrow(im_diag)>0){
for(i in seq(1,nrow(im_diag))){
if(im_diag$TG_DateNum[i]>=edf$start_date[j] && im_diag$TG_DateNum[i]<=edf$end_date[j]){
if(no.matches==0){
out[j,]<-rep(im_diag_2[i,],2)
no.matches<- 1
}else{
out[1,seq(ncol(diag)+1,ncol(out))]<- im_diag_2[i,]
no.matches<- no.matches+1
}
}
}
}
no.matches_diag[j]<- no.matches
}
out<- cbind(edf,out,no.matches_diag)
colnames(out)<- c(colnames(edf),paste0("first_",colnames(im_diag_2)),paste0("last_",colnames(im_diag_2)),"no.matches_diag")
return(out)
})
browser()
out<- as.data.frame(matrix(NA,nrow = nrow(episodedf),ncol = ncol(result[[1]])))
colnames(out)<- colnames(result[[1]])
ticker<- 1
for(j in seq(1,length(result))){
out[seq(ticker,ticker-1+nrow(result[[j]])),]<- result[[j]]
ticker<- ticker+nrow(result[[j]])
}
return(out)
}
add.diag.par<- function(episodedf, adddata, no.splits, no.workers){
edl<- chunk.data(episodedf, no.splits)
adddl<- chunk.adddata(edl,adddata)
par.cl<- makeCluster(no.workers)
dist.env<- environment()
clusterExport(par.cl,varlist = c("edl","adddl","arrange","filter","select"), envir = dist.env)
result<- parLapply(par.cl,1:no.splits, function(k){
edf<- edl[[k]]|>
arrange(uniPatID)
diag<- adddl[[k]]
out<- as.data.frame(matrix(NA,nrow = nrow(edf),ncol = 2*ncol(diag)-4))
no.matches_diag<- numeric(nrow(edf))
pat<- edf$uniPatID[1]
im_diag<- diag|>
filter(uniPatID==pat)
im_diag_2<- im_diag|>
select(-uniPatID,-TG_DateNum)
no.matches<- 0
if(nrow(im_diag)>0){
for(i in seq(1,nrow(im_diag))){
if(im_diag$TG_DateNum[i]>=edf$start_date[1] && im_diag$TG_DateNum[i]<=edf$end_date[1]){
if(no.matches==0){
out[1,]<-rep(im_diag_2[i,],2)
no.matches<- 1
}else{
out[1,seq(ncol(diag)+1,ncol(out))]<- im_diag_2[i,]
no.matches<- no.matches+1
}
}
}
}
no.matches_diag[1]<- no.matches
for(j in seq(2, nrow(edf))){
pat<- edf$uniPatID[j]
if(edf$uniPatID[j-1]!=pat){
im_diag<- diag|>
filter(uniPatID==pat)
im_diag_2<- im_diag|>
select(-uniPatID,-TG_DateNum)
}
no.matches<- 0
if(nrow(im_diag)>0){
for(i in seq(1,nrow(im_diag))){
if(im_diag$TG_DateNum[i]>=edf$start_date[j] && im_diag$TG_DateNum[i]<=edf$end_date[j]){
if(no.matches==0){
out[j,]<-rep(im_diag_2[i,],2)
no.matches<- 1
}else{
out[1,seq(ncol(diag)+1,ncol(out))]<- im_diag_2[i,]
no.matches<- no.matches+1
}
}
}
}
no.matches_diag[j]<- no.matches
}
out<- cbind(edf,out,no.matches_diag)
colnames(out)<- c(colnames(edf),paste0("first_",colnames(im_diag_2)),paste0("last_",colnames(im_diag_2)),"no.matches_diag")
return(out)
})
out<- as.data.frame(matrix(NA,nrow = nrow(episodedf),ncol = ncol(result[[1]])))
colnames(out)<- colnames(result[[1]])
ticker<- 1
for(j in seq(1,length(result))){
out[seq(ticker,ticker-1+nrow(result[[j]])),]<- result[[j]]
ticker<- ticker+nrow(result[[j]])
}
return(out)
}
#number of columns seems off-> check it out!
attempt_4<- add.diag.par(episodes_r1,diag.up_2,50,2)
View(attempt_4)
# 2
# Read in data
real.data<- FALSE
if(real.data){
setwd("N:/StudentischeHilfskraefte/_Kroes (Christoph)/Routinedaten/01_Husten/R/DB")
#names.vec<- c("Diag3","Impf3","IPC23","Labor3","LU3","PZN3","Stamm3","Ueberweis3")
names.vec<- c("Diag3","IPC23","Labor3","LU3","PZN3","Stamm3","Ueberweis3")
for (i in seq(1,length(names.vec))) {
file.name<- paste0("DB_",names.vec[i],"_v03",".csv")
im.file<- read.csv(file = file.name, header = TRUE, sep = ";")
assign(names.vec[i],im.file)
}
# remove duplicate file and unnecessary name
rm(file.name,im.file)
# Read in supplementary data
ListeKrankenkassen<- read.csv(file = "ListeKrankenkassen.csv", header = TRUE, sep = ";")
altersstruktur_deutschland <- read_excel("altersstruktur deutschland.xlsx")
icd10_blocks <- read_excel("icd10_blocks.xlsx")
icd10_description<- read_excel("icd10_description.xlsx")
selected.lab.descriptions<- read_excel("freitextanalyse.xlsx")
# read in functions
source("//fileserver1.uni-luebeck.de/ifa_homes/raphaelkroes/Documents/GitHub/Code_UKSH_Husten/functions.R")
}else{
source("fakedgp_work.R")
}
View(attempt_4)
#create complete datasets
episodes.stamm_r1<- add.stamm.new.par(episodes_r1,stamm.up,50,2)
#create complete datasets
episodes.stamm_r1<- add.stamm.new.par(episodes_r1,stamm.up,50,2)
episodes.diag_r1<- add.diag.par(episodes_r1,diag.up_2,50,2)
episodes.labor_r1<- add.lab.par(episodes_r1,labor.up,50,2)
episodes.ueberweis_1<- add.ueberweis.par(episodes_r1,ueberweis.up,50,2)
full_r1<- cbind(episodes.stamm_r1,episodes.diag_r1,episodes.labor_r1,episodes.ueberweis_1)
full_r1<- t(full_r1)|>
distinct()|>
t()
full.names<- colnames(full_r1)
full_r1<- t(as.matrix(full_r1))|>
distinct()|>
t()
full_r1<- t(as.matrix(full_r1))|>
as.data.frame()|>
distinct()|>
as.matrix()|>
t()|>
as.data.frame()
View(full_r1)
table(readClipboard())
table(sort(as.factor(readClipboard())))
