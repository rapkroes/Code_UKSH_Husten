# change data in out1 to reference out2
row.selector<- ipcdata$uniPatID==id & ipcdata$TG_DateNum==date
column.selector<- names(out1)!="uniPatID" & names(out1)!="TG_DateNum"
out1[row.selector,column.selector]<- ticker
ticker<- ticker+1
}
}
}
# add dummy for multiple anameses and remove duplicate rows(= several entries for one visit)
out1$`multiple rows`<- count>1
out1<- distinct(out1)
return(list(out1 = out1, out2 = out2))
}
# no.11
TG_DateNum2date<- function(TG_DateNum) as.Date(TG_DateNum, origin = "0000-01-01")
# no. 12
multiple.entry.analysis<- function(df){
#like contains.multiple.entries, but returns instead diagnostics how many entries are somewhat duplicate
im<- unique(paste0(df$uniPatID, df$TG_DateNum))
v<- c(length(im),nrow(df),nrow(df)-length(levels(im)),1-length(im)/nrow(df))
names(v)<- c("unique name/date combinations", "number of rows in data set", "difference","relative difference")
return(v)
}
# no.13
data.repair<- function(problemdata){
# For data sets which contain multiple entries for identical patient/ date combinations. Selects the newest entry of the multiple episodes and removes the other one(s).
out<- problemdata[nrow(problemdata):1,]
b<- paste0(out$uniPatID,out$TG_DateNum)
c<- duplicated(b)
out<- out[!c,]
return(out)
}
# no.14
aligner<- function(df,x, debugging=FALSE){
#finds rows with non-unique uniPatID/ TG_DateNum combinations and writes them all into one row. x specifies the maximum number of rows from df that are framed into a single row in the output data frame. If more than x rows are found in the data set, the first x rows are kept and the other ones are discarded.
raw.combinations<- paste0(df$uniPatID,df$TG_DateNum)
combinations<- levels(as.factor(raw.combinations))
l<- length(combinations)
memory<- data.frame(a=combinations, b= NA, c=NA)
colnames(memory)<- c("combination","no. seen before","last seen in row")
out<- as.data.frame(matrix(0, nrow = l, ncol = 2+x*(ncol(df)-2)))
ticker<- 1 #answer to "Onto which row in out do we write right now?"
partial.row<- colnames(df)!= "uniPatID" & colnames(df)!= "TG_DateNum"
colnames(out)<- c(colnames(df),paste(rep(colnames(df)[partial.row],x-1),sort(rep(1:(x-1),ncol(df)-2)),sep = "_"))
progress.bar<- txtProgressBar(min = 0, max = l, initial = 0)
for(i in seq(1,nrow(df))){
setTxtProgressBar(progress.bar,i)
case<- raw.combinations[i]
location<- which(combinations==case)
if(is.na(memory[location,2])){
out[ticker,1:ncol(df)]<- df[i,]
memory[location,2]<- 1
memory[location,3]<- ticker
ticker<- ticker+1
}else{
no.seen<- memory[location,2]
if(no.seen<x){
last.seen<- memory[location,3]
sel.col<-seq(1,ncol(df)-2)+no.seen*(ncol(df)-2)+2
sel.data<- df[i,partial.row]
#browser()
out[last.seen,sel.col]<- sel.data
memory[location,2]<- memory[location,2]+1
}
}
}
close(progress.bar)
if(debugging==TRUE){
return(list(as.data.frame(out),memory))
}else{
return(as.data.frame(out))
}
}
# no. 15
chunk.data<- function(df,  no.splits){
# splits a data frame into several data frames. They are returned as a list. The data is split by the uniPatID variable.
# no.splits is the number in how many separate data frames the original data frame df is split.
v<- as.factor(df$uniPatID)
v_2<- levels(v)
l<- length(v_2)
f<- ceiling(l/no.splits)
allocation<- rep(seq(1,no.splits),f)[1:l]
out<- list()
for (i in seq(1,no.splits)) {
out[[i]]<- df[v %in% v_2[allocation==i],]
}
return(out)
}
# no. 16
chunk.data_date<- function(df,  no.splits){
# splits a data frame into several data frames. They are returned as a list. The data is split by the TG_DateNum variable.
# no.splits is the number in how many separate data frames the original data frame df is split.
v<- as.factor(df$TG_DateNum)
v_2<- levels(v)
l<- length(v_2)
f<- ceiling(l/no.splits)
allocation<- rep(seq(1,no.splits),f)[1:l]
out<- list()
for (i in seq(1,no.splits)) {
out[[i]]<- df[v %in% v_2[allocation==i],]
}
return(out)
}
# no. 17
episode.fun<- function(ipc, length.of.episode){
#Uses an ipc data frame to create a data frame of episodes.
#length.of.episode is a a parameter how many days after the coughing was reported the diagnoses are still considered part of it.
patients<- levels(as.factor(as.character(ipc$uniPatID)))
out<- matrix(0,nrow = nrow(ipc), ncol = 3)
ticker<- 1
ipc.cols<- grepl("ipc2", colnames(ipc))
ipc$all_ipc<- ipc[,which(ipc.cols)[1]]
for(i in seq(2,sum(ipc.cols))){
ipc$all_ipc<- paste(ipc$all_ipc,ipc[,which(ipc.cols)[i]], sep = ";")
}
for (l in seq(1,length(patients))) {
par.data<- ipc |>
filter(uniPatID==patients[l]) |>
arrange(TG_DateNum)
for (m in seq(1,nrow(par.data))) {
if(grepl("R05",par.data$all_ipc[m])){
out[ticker,]<- c(patients[l], par.data$TG_DateNum[m], par.data$TG_DateNum[m]+length.of.episode)
ticker<- ticker+1
}
}
}
out<- out[1:(ticker-1),]
out<- data.frame(out[,1], as.numeric(out[,2]), as.numeric(out[,3]))
colnames(out)<- c("uniPatID","start_date","end_date")
return(out)
}
# no. 18
episodes.dr1<- function(episodedf){
# Applies decision rule 1 to a raw (i.e. containing overlapping episodes) episode data frame.
length.of.episode<- episodedf$end_date[1]-episodedf$start_date[1]
patients<- levels(as.factor(as.character(episodedf$uniPatID)))
out.list<- list()
for(i in seq_along(patients)){
pat_i<- as.numeric(patients[i])
dates<- sort(episodedf$start_date[episodedf$uniPatID==pat_i])
l<- length(dates)
if(l==1){
out.list[[i]]<- matrix(c(pat_i,dates,dates+length.of.episode),ncol=3)
}else if(l>1){
merge.choice<- diff(dates)<length.of.episode
episode.matrix<- matrix(NA,nrow = 1+sum(!merge.choice), ncol = 2)
episode.matrix[1,1]<- dates[1]
episode.matrix[1,2]<- dates[1]+length.of.episode
ticker<- 1
for(j in seq_along(merge.choice)){
if(merge.choice[j]){
episode.matrix[ticker,2]<- dates[1+j]+length.of.episode
}else{
ticker<- ticker+1
episode.matrix[ticker,1]<- dates[1+j]
episode.matrix[ticker,2]<- dates[1+j]+length.of.episode
}
}
out.list[[i]]<- cbind(rep(pat_i,nrow(episode.matrix)),episode.matrix)
}else{
stop(paste("For patient",pat_i,"there is a mistake: The number of recorded dates is supposedly",l))
}
}
out<- as.data.frame(do.call(rbind,out.list))
colnames(out)<- c("uniPatID","start_date","end_date")
return(out)
}
# no. 19
episodes.dr2<- function(episodedf){
# Applies decision rule 2 to a raw (i.e. containing overlapping episodes) episode data frame.
n<- nrow(episodedf)
out<- episodedf
for(i in seq(2,n)){
if(episodedf$uniPatID[i]==episodedf$uniPatID[i-1]){
if(episodedf$end_date[i-1]>episodedf$start_date[i]){
out$end_date[i-1]<- out$start_date[i-1]-1
}
}
}
return(out)
}
# no. 20
episodes.dr3<- function(episodedf,ipc, debug=FALSE){
# Applies decision rule 3 to a raw (i.e. containing overlapping episodes) episode data frame.
patients<- levels(as.factor(episodedf$uniPatID))
next.incident<- numeric(nrow(episodedf))
for(i in seq(1,length(patients))){
pat_i<- patients[i]
rows.episodes<- which(episodedf$uniPatID==pat_i)
start.dates.episodes<- episodedf$start_date[rows.episodes]
end.dates.episodes<- episodedf$end_date[rows.episodes]
incident.dates<- ipc$TG_DateNum[ipc$uniPatID==pat_i]
store<- numeric(length(start.dates.episodes))
for(j in seq(1, length(start.dates.episodes))){
indices<- which(incident.dates> start.dates.episodes[j] & incident.dates<end.dates.episodes[j])
if(length(indices)>0){
store[j]<- min(incident.dates[indices])
}else{
store[j]<- end.dates.episodes[j]
}
}
next.incident[rows.episodes]<- store
}
if(debug==TRUE){
out<- cbind(episodedf,next.incident)
}else{
out<- episodedf
out$end_date<- next.incident
}
return(out)
}
# no. 21
episodes.dr4<- function(episodedf){
# Applies decision rule 4 to a raw (i.e. containing overlapping episodes) episode data frame.
earliest.TG_Date<- min(episodedf$start_date)
latest.TG_Date<- max(episodedf$start_date)
earliest.year.POSIXlt<- year(TG_DateNum2date(earliest.TG_Date))
latest.year.POSIXlt<- year(TG_DateNum2date(latest.TG_Date))
no.years<- latest.year.POSIXlt-earliest.year.POSIXlt
threshold.dates<- numeric(4*no.years)
for(i in seq(1,no.years)){
threshold.dates[1+(i-1)*4]<- paste0(seq(earliest.year.POSIXlt, latest.year.POSIXlt)[i], "-01-01")
threshold.dates[2+(i-1)*4]<- paste0(seq(earliest.year.POSIXlt, latest.year.POSIXlt)[i], "-04-01")
threshold.dates[3+(i-1)*4]<- paste0(seq(earliest.year.POSIXlt, latest.year.POSIXlt)[i], "-07-01")
threshold.dates[4+(i-1)*4]<- paste0(seq(earliest.year.POSIXlt, latest.year.POSIXlt)[i], "-10-01")
}
threshold.dates_num<- as.numeric(as.Date(threshold.dates, origin= "0000-01-01"))
#if(all(as.Date(threshold.dates_num!=as.Date(threshold.dates)))) stop("Conversion error in the threshold date!")
n<- nrow(episodedf)
out<- episodedf
for(i in seq(2,n)){
if(episodedf$uniPatID[i]==episodedf$uniPatID[i-1]){
if(out$start_date[i]<out$end_date[i-1]){
if(sum(out$start_date[i]>threshold.dates_num & out$end_date[i-1]<threshold.dates_num)==1){#condition: one threshold numeric date lies between these two
outf$start_date[i]<- out$start_date[i-1]
out$end_date[i]<- out$end_date[i-1]
}else if(sum(out$start_date[i]>threshold.dates_num & out$end_date[i-1]<threshold.dates_num)>1){
warning(paste("Between the coughing incidents, lies more than one quarter. To check out the episode, have a look at lines", (i-1),"&", i, "in the original dataset (episodedf, not the output dataset)."))
outf$start_date[i]<- out$start_date[i-1]
out$end_date[i]<- out$end_date[i-1]
}else{
out$end_date[i-1]<- out$start_date[i]-1
}
}
}
}
out<- distinct(out)
return(out)
}
# no. 22
# no. 23
add.stamm<- function(episodedf, stamm){
#adds stamm data to the episode data frame by matching entries.
#episodedf is a data frame created through one of the decision rules episodes.drx
#stamm is a cleaned and prepared stamm data frame (e.g. stamm.up_2)
#The function returns an episode data frame with the Stamm data matched to the episodes. There is also a variable called stamm_is_there, which is 1 if a Stamm entry was able to be matched, and 0 if no Stamm entry was able to be matched to that patient/ episode.
n<- nrow(episodedf)
p<- ncol(episodedf)
p_out<- p+ncol(stamm)
out<- as.data.frame(matrix(NA, nrow = n, ncol = p_out))
stamm$uniPatID<- as.character(stamm$uniPatID)
stamm.is.there<- numeric(n)
for(i in seq(1,n)){
pat_i<- as.character(episodedf$uniPatID[i])
pat.rows<- which(stamm$uniPatID==pat_i)
if(length(pat.rows)>0){
dates<- stamm$TG_DateNum[pat.rows]
im<- dates<=episodedf$start_date[i]
if(all(!im)){
#if no Stamm data has been recorded prior to the first coughing (i.e. first visit of clinic), this might be due to the patient being at the clinic for the first time and the doctor back dated the start of coughing (i.e. first health incident, which occurred before the visit visit at the clinic).
loc<- pat.rows[1]
}else{
loc<- pat.rows[sum(im)]
}
out[i,seq(p+1,p_out)]<- stamm[loc,]
stamm.is.there[i]<- 1
}
}
unipat.col<- p+which(colnames(stamm)=="uniPatID")
#remove duplicate uniPatID column
out<- out[,-(unipat.col)]
out[,1:p]<- episodedf
out<- cbind(out,stamm.is.there)
colnames(out)<- c(colnames(episodedf),colnames(stamm),"stamm_is_there")[-unipat.col]
stamm_date.col<- which(colnames(out)=="TG_DateNum")
colnames(out)[stamm_date.col]<- "Stamm_date"
return(as.data.frame(out))
}
# no. 24
add.dataset<- function(episodedf, adddata,name.dataset){
#matches the entries from any suitable dataset to the ones from an episode data frame.
#episodedf is the episode data frame, as produced by episodes.drx
#adddata is any of the cleaned and prepared datasets except for Stammdaten
#name.dataset is a character string giving the name of the dataset. It is used to name the 'number of matches' variable.
#The function returns an episode data frame with the first and last matches of the added dataset, and the number of entries in adddata that are a match for this episode.
patients<- levels(as.factor(as.character(episodedf$uniPatID)))
adddata$uniPatID<- as.character(adddata$uniPatID)
n<- nrow(episodedf)
no.matches<- numeric(n)
first.match<- as.data.frame(matrix(NA,nrow = n, ncol = ncol(adddata)))
last.match<- as.data.frame(matrix(NA,nrow = n, ncol = ncol(adddata)))
for(j in seq_along(patients)){
pat_i<- patients[j]
rows_episode<- which(episodedf$uniPatID==pat_i)
match.data<- adddata|>
filter(uniPatID==pat_i)|>
arrange(TG_DateNum)
if(nrow(match.data)>0){
for(i in seq_along(rows_episode)){
sd<- episodedf$start_date[rows_episode[i]]
ed<- episodedf$end_date[rows_episode[i]]
matches<- which(match.data$TG_DateNum>=sd & match.data$TG_DateNum<=ed)
if(length(matches)>0){
no.matches[rows_episode[i]]<- length(matches)
first.match[rows_episode[i],]<- match.data[min(matches),]
last.match[rows_episode[i],]<- match.data[max(matches),]
}
}
}
}
colnames(first.match)<- paste0("first_",colnames(adddata))
colnames(last.match)<- paste0("last_",colnames(adddata))
col.selector<- colnames(adddata)!= "uniPatID" & colnames(adddata)!= "TG_DateNum"
out<- cbind(episodedf, first.match[,col.selector],last.match[,col.selector],no.matches)
colnames(out)[ncol(out)]<- paste0("no.matches_",name.dataset)
return(out)
}
# no. 25
date2TG_DateNum<- function(date) as.numeric(as.Date(date)) +719529
# transforms a date (yyyy-mm-dd) into a Matlab Serial time code (like TG_DateNum)
# no. 26
age.weights<- function(startage,endage){
# Uses data from Genesis data base to create a vector of points of mass from a probability density function of the live age distribution in Germany
if(startage<1) stop("By default, the start age has to be at least one year.")
if(startage>85) stop("All ages are dropped due to the start age being too high. Please select a lower start age.")
if(endage<1) stop("The end age is too low. It has to be no lower than one year.")
if(endage>84) warning("Please note that the data provided by the statistical office is placed into a single bin from age 85 on. All ages from that bin are therefore treated as equally distributed across the range from 85 to the end date.")
vector<- altersstruktur_deutschland$`Bevölkerungsstand (Anzahl)`
if(endage<=84){
out<- vector[seq(startage+1,endage+1)]
}else{
l<- endage-84
im<- vector[seq(startage+1,85)]
out<- c(im,rep(vector[86]/l,l))
}
out<- out/sum(out)
return(out)
}
# no. 27
episodes.overlap.finder<- function(episodedf, date=FALSE){
#finds overlapping intervals in episode data frames. Used as a debugging function.
n<- nrow(episodedf)
overlap<- numeric(n)
for(i in seq(2,n)){
if(episodedf$uniPatID[i]==episodedf$uniPatID[i-1]){
if(episodedf$start_date[i]<episodedf$end_date[i-1]){
overlap[i]<- 1
}
}
}
out<- episodedf
out$overlap<- overlap
if(date==TRUE){
out$start_date<- TG_DateNum2date(out$start_date)
out$end_date<- TG_DateNum2date(out$end_date)
}
return(out)
}
View(ListeKrankenkassen)
# 3
# Read in data
#setwd("N:/StudentischeHilfskraefte/_Kroes (Christoph)/Routinedaten/01_Husten/DB")
setwd("C:/Users/Raphael (limited)/Documents/RS_DB_v02")
names.vec<- c("Diag3","Impf3","IPC23","Labor3","LU3","PZN3","Stamm3","Ueberweis3")
for (i in seq(1,length(names.vec))) {
#file.name<- paste0("DB_",names.vec[i],"_v03",".csv")
file.name<- paste0("RS_DB_",names.vec[i],"_v02",".csv")
im.file<- read.csv(file = file.name, header = TRUE, sep = ";")
assign(names.vec[i],im.file)
}
# remove duplicate file and unnecessary name
rm(file.name,im.file)
ListeKrankenkassen<- read.csv(file = "ListeKrankenkassen.csv", header = TRUE, sep = ";")
altersstruktur_deutschland <- read_excel("altersstruktur deutschland.xlsx")
View(ListeKrankenkassen)
# 3
# Read in data
#setwd("N:/StudentischeHilfskraefte/_Kroes (Christoph)/Routinedaten/01_Husten/DB")
setwd("C:/Users/Raphael (limited)/Documents/RS_DB_v02")
names.vec<- c("Diag3","Impf3","IPC23","Labor3","LU3","PZN3","Stamm3","Ueberweis3")
for (i in seq(1,length(names.vec))) {
#file.name<- paste0("DB_",names.vec[i],"_v03",".csv")
file.name<- paste0("RS_DB_",names.vec[i],"_v02",".csv")
im.file<- read.csv(file = file.name, header = TRUE, sep = ";")
assign(names.vec[i],im.file)
}
# remove duplicate file and unnecessary name
rm(file.name,im.file)
ListeKrankenkassen<- read.csv(file = "ListeKrankenkassen.csv", header = TRUE, sep = ";")
altersstruktur_deutschland <- read_excel("altersstruktur deutschland.xlsx")
View(Labor3)
View(Impf3)
View(Diag3)
View(IPC23)
art.data<- function(n){
ID.levels<- n/4
earliest.date<- date2TG_DateNum("2016-01-01")
latest.date<- date2TG_DateNum("2022-12-31")
date.vec<- seq(earliest.date,latest.date)
art.stamm<- data.frame(
uniPatID= ID.levels,
PatID= NA,
TG_DateNum= sample(date.vec,n/4, replace = TRUE)
index_i=NA,
art.data<- function(n){
ID.levels<- n/4
earliest.date<- date2TG_DateNum("2016-01-01")
latest.date<- date2TG_DateNum("2022-12-31")
date.vec<- seq(earliest.date,latest.date)
art.stamm<- data.frame(
uniPatID= ID.levels,
PatID= NA,
TG_DateNum= sample(date.vec,n/4, replace = TRUE),
index_i=NA,
PraxisID=NA,
PLZ= NA,
Entfernung=rpois(n/4),
Geburtsjahr= sample(1920:2010,n/4,replace = TRUE),
Geburtsmonat= sample(1:12,n/4, replace = TRUE),
Transgen= 0,
Divers=0,
Geschlundef=0,
IK=sample(ListeKrankenkassen$IK,n/4,replace = TRUE),
Kasse=NA
)
art.stamm$Maennl<- sample(0:1,n/4, replace = TRUE)
art.stamm$Weibl<- 1-art.stamm$Maennl
art.stamm$Status_M<- sample(0:1,n/4, replace = TRUE)
art.stamm$Status_F<- 1-art.stamm$Maennl
art.stamm$Status_R<- sample(0:1,n/4, replace = TRUE)
icd10.gen.fun<- function(s){
1st<- sample(LETTERS,s,replace = TRUE)
art.data<- function(n){
ID.levels<- n/4
earliest.date<- date2TG_DateNum("2016-01-01")
latest.date<- date2TG_DateNum("2022-12-31")
date.vec<- seq(earliest.date,latest.date)
art.stamm<- data.frame(
uniPatID= ID.levels,
PatID= NA,
TG_DateNum= sample(date.vec,n/4, replace = TRUE),
index_i=NA,
PraxisID=NA,
PLZ= NA,
Entfernung=rpois(n/4),
Geburtsjahr= sample(1920:2010,n/4,replace = TRUE),
Geburtsmonat= sample(1:12,n/4, replace = TRUE),
Transgen= 0,
Divers=0,
Geschlundef=0,
IK=sample(ListeKrankenkassen$IK,n/4,replace = TRUE),
Kasse=NA
)
art.stamm$Maennl<- sample(0:1,n/4, replace = TRUE)
art.stamm$Weibl<- 1-art.stamm$Maennl
art.stamm$Status_M<- sample(0:1,n/4, replace = TRUE)
art.stamm$Status_F<- 1-art.stamm$Maennl
art.stamm$Status_R<- sample(0:1,n/4, replace = TRUE)
icd10.gen.fun<- function(s){
first<- sample(LETTERS,s,replace = TRUE)
second<- sample(0:9,s,replace = TRUE)
third<- sample(0:9,s,replace = TRUE)
return(paste0(first,second,third))
}
art.diag<- data.frame(
uniPatID= sample(ID.levels,n, replace = TRUE),
TG_DateNum= sample(dates.vec,n,replace = TRUE),
DiagTyp=sample(c("D","DD"),n,replace = TRUE, prob = c(0.95,0.05)),
icd10=icd10.gen.fun(n)
)
art.impf<- Impf3[sample(1:nrow(Impf3),n,replace = TRUE),]
art.impf$uniPatID<- sample(ID.levels,n, replace = TRUE)
art.impf$TG_DateNum<- sample(date.vec,n,replace = TRUE)
art.ipc<- data.frame(
uniPatID= sample(ID.levels,n, replace = TRUE),
TG_DateNum= sample(dates.vec,n,replace = TRUE),
AnamnTyp=sample(c("A","B"),n,replace = TRUE),
ipc2="R05"
)
art.lab<- Labor3[sample(1:nrow(Labor3),n,replace = TRUE),]
art.lab$uniPatID<- uniPatID<- sample(ID.levels,n, replace = TRUE)
art.lab$TG_DateNum<- sample(date.vec,n,replace = TRUE)
art.lu<- data.frame(
uniPatID= sample(ID.levels,n, replace = TRUE),
TG_DateNum= sample(dates.vec,n,replace = TRUE)
)
art.pzn<- data.frame(
uniPatID= sample(ID.levels,n, replace = TRUE),
TG_DateNum= sample(dates.vec,n,replace = TRUE),
PZN=sample(1:10000,10*n,replace = TRUE)
)
art.ueberweis<- data.frame(
uniPatID= sample(ID.levels,n, replace = TRUE),
TG_DateNum= sample(dates.vec,n,replace = TRUE),
Uberw_Pneumo= sample(0:1,n,replace = TRUE),
Uberw_Radiol= sample(0:1,n,replace = TRUE),
Uberw_KH= sample(0:1,n,replace = TRUE)
)
return(list(
art.diag,art.impf,art.ueberweis,art.pzn,art.lu,art.lab,art.ipc,art.stamm
))
}
